import org.digitalleague.key.KeySchedule;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class KeyScheduleTest {
    private static final KeySchedule keySchedule = new KeySchedule();
    private static final byte[] KEY_128 = new byte[] {
            0x2b, 0x7e, 0x15, 0x16,
            0x28, (byte)0xae, (byte)0xd2, (byte)0xa6,
            (byte)0xab, (byte)0xf7, 0x15, (byte)0x88,
            0x09, (byte)0xcf, 0x4f, 0x3c
    };

    private static final byte[] KEY_192 = {
            (byte)0x8e, 0x73, (byte)0xb0, (byte)0xf7,
            (byte)0xda, 0x0e, 0x64, 0x52,
            (byte)0xc8, 0x10, (byte)0xf3, 0x2b,
            (byte)0x80, (byte)0x90, (byte)0x79, (byte)0xe5,
            (byte)0x62, (byte)0xf8, (byte)0xea, (byte)0xd2,
            (byte)0x52, 0x2c, 0x6b, (byte)0x7b
    };

    private static final byte[] KEY_256 = {
            0x60, 0x3d, (byte)0xeb, 0x10,
            0x15, (byte)0xca, 0x71, (byte)0xbe,
            0x26, (byte)0xe8, (byte)0x8a, (byte)0xd2,
            (byte)0xa6, (byte)0xab, (byte)0xf7, 0x15,
            (byte)0x88, 0x09, (byte)0xcf, 0x4f,
            0x3c, (byte)0x92, (byte)0xe3, 0x5b,
            (byte)0xd3, 0x41, 0x5c, 0x1b,
            0x7e, 0x2f, 0x29, (byte)0xad};

    private static final byte[][] EXPECTED_ROUND_KEYS_AES_128 = {
            {0x2b, 0x7e, 0x15, 0x16},
            {0x28, (byte)0xae, (byte)0xd2, (byte)0xa6},
            {(byte)0xab, (byte)0xf7, 0x15, (byte)0x88},
            {0x09, (byte)0xcf, 0x4f, 0x3c},
            {(byte)0xa0, (byte)0xfa, (byte)0xfe, 0x17},
            {(byte)0x88, 0x54, 0x2c, (byte)0xb1},
            {0x23, (byte)0xa3, 0x39, (byte)0x39},
            {(byte)0x2a, 0x6c, 0x76, 0x05},
            {(byte)0xf2, (byte)0xc2, (byte)0x95, (byte)0xf2},
            {0x7a, (byte)0x96, (byte)0xb9, 0x43},
            {0x59, (byte)0x35, (byte)0x80, (byte)0x7a},
            {(byte)0x73, (byte)0x59, (byte)0xf6, (byte)0x7f},
            {0x3d, (byte)0x80, 0x47, 0x7d},
            {0x47, 0x16, (byte)0xfe, 0x3e},
            {0x1e, 0x23, 0x7e, (byte)0x44},
            {0x6d, 0x7a, (byte)0x88, (byte)0x3b},
            {(byte)0xef, 0x44, (byte)0xa5, 0x41},
            {(byte)0xa8, 0x52, 0x5b, (byte)0x7f},
            {(byte)0xb6, 0x71, 0x25, (byte)0x3b},
            {(byte)0xdb, 0x0b, (byte)0xad, 0x00},
            {(byte)0xd4, (byte)0xd1, (byte)0xc6, (byte)0xf8},
            {0x7c, (byte)0x83, (byte)0x9d, (byte)0x87},
            {(byte)0xca, (byte)0xf2, (byte)0xb8, (byte)0xbc},
            {0x11, (byte)0xf9, 0x15, (byte)0xbc},
            {(byte)0x6d, (byte)0x88, (byte)0xa3, (byte)0x7a},
            {0x11, (byte)0x0b, (byte)0x3e, (byte)0xfd},
            {(byte)0xdb, (byte)0xf9, (byte)0x86, (byte)0x41},
            {(byte)0xca, 0x00, (byte)0x93, (byte)0xfd},
            {(byte)0x4e, 0x54, (byte)0xf7, 0x0e},
            {0x5f, 0x5f, (byte)0xc9, (byte)0xf3},
            {(byte)0x84, (byte)0xa6, 0x4f, (byte)0xb2},
            {(byte)0x4e, (byte)0xa6, (byte)0xdc, (byte)0x4f},
            {(byte)0xea, (byte)0xd2, (byte)0x73, 0x21},
            {(byte)0xb5, (byte)0x8d, (byte)0xba, (byte)0xd2},
            {0x31, 0x2b, (byte)0xf5, 0x60},
            {(byte)0x7f, (byte)0x8d, 0x29, 0x2f},
            {(byte)0xac, 0x77, 0x66, (byte)0xf3},
            {(byte)0x19, (byte)0xfa, (byte)0xdc, 0x21},
            {0x28, (byte)0xd1, 0x29, (byte)0x41},
            {0x57, (byte)0x5c, 0x00, 0x6e},
            {(byte)0xd0, 0x14, (byte)0xf9, (byte)0xa8},
            {(byte)0xc9, (byte)0xee, 0x25, (byte)0x89},
            {(byte)0xe1, 0x3f, 0x0c, (byte)0xc8},
            {(byte)0xb6, (byte)0x63, 0x0c, (byte)0xa6}
    };

    private static final byte[][] EXPECTED_ROUND_KEYS_AES_192 = {
            {(byte)0x8e, 0x73, (byte)0xb0, (byte)0xf7},
            {(byte)0xda, 0x0e, 0x64, 0x52},
            {(byte)0xc8, 0x10, (byte)0xf3, 0x2b},
            {(byte)0x80, (byte)0x90, (byte)0x79, (byte)0xe5},
            {(byte)0x62, (byte)0xf8, (byte)0xea, (byte)0xd2},
            {(byte)0x52, 0x2c, 0x6b, (byte)0x7b},
            {(byte)0xfe, 0x0c, (byte)0x91, (byte)0xf7},
            {0x24, (byte)0x02, (byte)0xf5, (byte)0xa5},
            {(byte)0xec, 0x12, (byte)0x06, (byte)0x8e},
            {0x6c, (byte)0x82, 0x7f, (byte)0x6b},
            {0x0e, (byte)0x7a, (byte)0x95, (byte)0xb9},
            {(byte)0x5c, 0x56, (byte)0xfe, (byte)0xc2},
            {0x4d, (byte)0xb7, (byte)0xb4, (byte)0xbd},
            {(byte)0x69, (byte)0xb5, (byte)0x41, (byte)0x18},
            {(byte)0x85, (byte)0xa7, 0x47, (byte)0x96},
            {(byte)0xe9, (byte)0x25, (byte)0x38, (byte)0xfd},
            {(byte)0xe7, (byte)0x5f, (byte)0xad, 0x44},
            {(byte)0xbb, 0x09, 0x53, (byte)0x86},
            {0x48, 0x5a, (byte)0xf0, (byte)0x57},
            {0x21, (byte)0xef, (byte)0xb1, (byte)0x4f},
            {(byte)0xa4, 0x48, (byte)0xf6, (byte)0xd9},
            {(byte)0x4d, 0x6d, (byte)0xce, (byte)0x24},
            {(byte)0xaa, (byte)0x32, (byte)0x63, 0x60},
            {(byte)0x11, 0x3b, (byte)0x30, (byte)0xe6},
            {(byte)0xa2, 0x5e, (byte)0x7e, (byte)0xd5},
            {(byte)0x83, (byte)0xb1, (byte)0xcf, (byte)0x9a},
            {0x27, (byte)0xf9, (byte)0x39, (byte)0x43},
            {(byte)0x6a, (byte)0x94, (byte)0xf7, (byte)0x67},
            {(byte)0xc0, (byte)0xa6, (byte)0x94, 0x07},
            {(byte)0xd1, (byte)0x9d, (byte)0xa4, (byte)0xe1},
            {(byte)0xec, 0x17, (byte)0x86, (byte)0xeb},
            {0x6f, (byte)0xa6, 0x49, (byte)0x71},
            {0x48, (byte)0x5f, 0x70, 0x32},
            {0x22, (byte)0xcb, (byte)0x87, 0x55},
            {(byte)0xe2, (byte)0x6d, 0x13, 0x52},
            {0x33, (byte)0xf0, (byte)0xb7, (byte)0xb3},
            {0x40, (byte)0xbe, (byte)0xeb, 0x28},
            {0x2f, 0x18, (byte)0xa2, 0x59},
            {(byte)0x67, (byte)0x47, (byte)0xd2, 0x6b},
            {0x45, (byte)0x8c, (byte)0x55, (byte)0x3e},
            {(byte)0xa7, (byte) 0xe1, 0x46, 0x6c},
            {(byte)0x94, 0x11, (byte)0xf1, (byte)0xdf},
            {(byte)0x82, 0x1f, (byte)0x75, (byte)0x0a},
            {(byte)0xad, 0x07, (byte)0xd7, 0x53},
            {(byte)0xca, 0x40, (byte)0x05, 0x38},
            {(byte)0x8f, (byte)0xcc, (byte)0x50, (byte)0x06},
            {(byte)0x28, (byte)0x2d, (byte)0x16, (byte)0x6a},
            {(byte)0xbc, 0x3c, (byte)0xe7, (byte)0xb5},
            {(byte)0xe9, (byte)0x8b, (byte)0xa0, (byte)0x6f},
            {0x44, (byte)0x8c, (byte)0x77, (byte)0x3c},
            {(byte)0x8e, (byte)0xcc, (byte)0x72, 0x04},
            {0x01, (byte)0x00, (byte)0x22, 0x02}
    };

    private static final byte[][] EXPECTED_ROUND_KEYS_AES_256 = {
            {(byte) 0x60, (byte) 0x3d, (byte) 0xeb, (byte) 0x10}, {(byte) 0x15, (byte) 0xca, (byte) 0x71, (byte) 0xbe},
            {(byte) 0x26, (byte) 0xe8, (byte) 0x8a, (byte) 0xd2}, {(byte) 0xa6, (byte) 0xab, (byte) 0xf7, (byte) 0x15},
            {(byte) 0x88, (byte) 0x09, (byte) 0xcf, (byte) 0x4f}, {(byte) 0x3c, (byte) 0x92, (byte) 0xe3, (byte) 0x5b},
            {(byte) 0xd3, (byte) 0x41, (byte) 0x5c, (byte) 0x1b}, {(byte) 0x7e, (byte) 0x2f, (byte) 0x29, (byte) 0xad},
            {(byte) 0x43, (byte) 0x75, (byte) 0x40, (byte) 0xd3}, {(byte) 0x69, (byte) 0x2c, (byte) 0x6d, (byte) 0x80},
            {(byte) 0x9a, (byte) 0x7f, (byte) 0x15, (byte) 0x3e}, {(byte) 0x0c, (byte) 0xe2, (byte) 0xcf, (byte) 0xce},
            {(byte) 0xf3, (byte) 0x77, (byte) 0x31, (byte) 0x8a}, {(byte) 0x73, (byte) 0x1c, (byte) 0x37, (byte) 0x24},
            {(byte) 0x59, (byte) 0x4b, (byte) 0x77, (byte) 0x7a}, {(byte) 0xc3, (byte) 0x4a, (byte) 0x79, (byte) 0x40},
            {(byte) 0x7f, (byte) 0x77, (byte) 0x9a, (byte) 0x8b}, {(byte) 0x41, (byte) 0x5f, (byte) 0x60, (byte) 0x2f},
            {(byte) 0x18, (byte) 0xbf, (byte) 0x35, (byte) 0x92}, {(byte) 0x21, (byte) 0x38, (byte) 0xfa, (byte) 0x8f},
            {(byte) 0x55, (byte) 0x04, (byte) 0x9e, (byte) 0x49}, {(byte) 0x0d, (byte) 0x3a, (byte) 0xa5, (byte) 0x9b},
            {(byte) 0x77, (byte) 0x2e, (byte) 0xc2, (byte) 0xf5}, {(byte) 0x93, (byte) 0x72, (byte) 0x86, (byte) 0xd2},
            {(byte) 0x1c, (byte) 0xc7, (byte) 0x12, (byte) 0x94}, {(byte) 0x44, (byte) 0xd2, (byte) 0x03, (byte) 0xb8},
            {(byte) 0x80, (byte) 0x58, (byte) 0xf5, (byte) 0xab}, {(byte) 0x5e, (byte) 0xf6, (byte) 0x9d, (byte) 0x0f},
            {(byte) 0xc9, (byte) 0x61, (byte) 0x4d, (byte) 0x67}, {(byte) 0x67, (byte) 0x16, (byte) 0x9e, (byte) 0x18},
            {(byte) 0xa9, (byte) 0x63, (byte) 0x0f, (byte) 0x72}, {(byte) 0x61, (byte) 0x4a, (byte) 0x35, (byte) 0x48},
            {(byte) 0x08, (byte) 0xfe, (byte) 0x26, (byte) 0x1c}, {(byte) 0x9a, (byte) 0xb7, (byte) 0xb8, (byte) 0x5d},
            {(byte) 0x9a, (byte) 0xe2, (byte) 0x41, (byte) 0x38}, {(byte) 0xcf, (byte) 0x5d, (byte) 0xc9, (byte) 0x20},
            {(byte) 0x67, (byte) 0x41, (byte) 0x43, (byte) 0x11}, {(byte) 0xd9, (byte) 0x27, (byte) 0x49, (byte) 0x4a},
            {(byte) 0xc5, (byte) 0x50, (byte) 0x6d, (byte) 0x33}, {(byte) 0x9b, (byte) 0x5a, (byte) 0x4d, (byte) 0x31},
            {(byte) 0xda, (byte) 0x7b, (byte) 0x6c, (byte) 0xb1}, {(byte) 0x01, (byte) 0xf7, (byte) 0xf4, (byte) 0x1c},
            {(byte) 0x8e, (byte) 0xb9, (byte) 0x9c, (byte) 0x55}, {(byte) 0x3b, (byte) 0x38, (byte) 0x29, (byte) 0x9e},
            {(byte) 0x42, (byte) 0x4d, (byte) 0x4f, (byte) 0x27}, {(byte) 0x57, (byte) 0x8a, (byte) 0x99, (byte) 0x01},
            {(byte) 0x72, (byte) 0xc3, (byte) 0x87, (byte) 0x0a}, {(byte) 0xb7, (byte) 0x6d, (byte) 0x92, (byte) 0xb4},
            {(byte) 0x02, (byte) 0x32, (byte) 0x17, (byte) 0xd9}, {(byte) 0xa9, (byte) 0x53, (byte) 0x6f, (byte) 0x7b},
            {(byte) 0x05, (byte) 0x83, (byte) 0x5f, (byte) 0x05}, {(byte) 0x74, (byte) 0xc1, (byte) 0x65, (byte) 0x71},
            {(byte) 0xac, (byte) 0xd1, (byte) 0x96, (byte) 0xa7}, {(byte) 0x55, (byte) 0x1b, (byte) 0x95, (byte) 0xc2},
            {(byte) 0x21, (byte) 0xa4, (byte) 0x1e, (byte) 0x6c}, {(byte) 0x47, (byte) 0xc1, (byte) 0x7b, (byte) 0x4d},
            {(byte) 0xdc, (byte) 0x11, (byte) 0x3f, (byte) 0x59}, {(byte) 0x0d, (byte) 0x78, (byte) 0x49, (byte) 0xba},
            {(byte) 0xb3, (byte) 0x22, (byte) 0x35, (byte) 0x3b}, {(byte) 0xc0, (byte) 0x06, (byte) 0x24, (byte) 0x42},
            {(byte) 0x8c, (byte) 0x58, (byte) 0x6d, (byte) 0x51}, {(byte) 0xe9, (byte) 0x57, (byte) 0x49, (byte) 0x9a},
            {(byte) 0xeb, (byte) 0x98, (byte) 0x5c, (byte) 0x05}, {(byte) 0x49, (byte) 0xc3, (byte) 0x54, (byte) 0x2e}
    };

    @Test
    public void testKeySchedule128() {
        Assertions.assertArrayEquals(EXPECTED_ROUND_KEYS_AES_128, keySchedule.keyExpansion(KEY_128));
    }

    @Test
    public void testKeySchedule192() {
        Assertions.assertArrayEquals(EXPECTED_ROUND_KEYS_AES_192, keySchedule.keyExpansion(KEY_192));
    }
}
